/*
-----------------------------------------------------------------------------------------------------------------------------
												※	Stack과 Heap	※
	1) 개요
		프로그램을 작성하고 컴파일을 하면 메모리에 적재되는데,
		이 때, 메모리는 segment 단위{Heap, Stack, Data, BSS, Code}로 영역을 나누어 메모리를 관리한다.

	2) 기본 Memory Structure
						*---------------------------------------------------*
						|													|
						|						Heap						|
						|													|
						*---------------------------------------------------*
						|						Stack						|
						|													|
						*---------------------------------------------------*
						|						Data						|
						|		초기화된 데이터 세그먼트					|
						|		초기화된 전역 & 정적 변수					|
						*---------------------------------------------------*
						|			BSS(Blocked started by symbol)			|
						|		초기화 되지 않은 데이터 세그먼트			|
						|		0으로 초기화된 전역 & 정적 변수				|
						*---------------------------------------------------*
						|						Code						|
						*---------------------------------------------------*	

		-> Code : 프로그래머가 작성한 프로그램이 올라가 있음.
		-> Data 영역 {Data, BSS} : 제일 먼저 생기고 제일 늦게 없어진다.
		-> Stack :	작성된 main() 함수, 사용자 정의 함수, 지역 변수(local variable), 파라미터가 
					stack frame단위로 Stack에 push() 된다.

					Stack ADT 특성에 의해 함수를 실행하고나서 어디로 돌아갈 지도 Stack에 저장되어 있는데
					이는, 해당 Stack Frame에 pop()연산을 하면 알 수 있다.

					장점) 빠르다. (그래서 지역변수 접근도 빠르다.)
					단점) 메모리 관리를 잘 못하면 Stack Overflow가 발생할 수 있다.
						ex -> 재귀함수를 base-case 분기 없이 구현한 경우 
						ex -> 한번에 너무 많은, 또는 자잘한 변수들을 메모리 관리를 안 하고 계속 사용해 누적이 되어 쌓이는 경우.

		-> Heap : Stack의 단점을 보완한 Segment.
				가령, 1차원 배열 동적할당을 할 경우...

				main(){
					int* ptr = nullptr;
					ptr=  new int[1000000];

					delete[] ptr;
				}

				Stack {main(), int* ptr} 가 들어가고
				Heap {ptr <- sizeof(int) * 1000000 bytes} 가 들어간다.

				※ Heap은 Stack에 비해 사이즈가 크다. 다만, 랜덤위치에 생성되므로 어디에 메모리에 적재될 지 예측이 어렵다.

	3) 안 좋은 사례
		배열을 사용하면 new int[] 반드시 delete[] 을 해줘야 한다.
		안 그러면 함수는 종료되어함수 내부에 있던 배열 포인터들은 같이 stack 메모리에서 해제 되었는데,
		배열 포인터가 할당한 heap 메모리 영역은 삭제되질 않아 memory leak(메모리 누수)현상이 발생한다.
		그러므로, 프로그래머는 반드시 heap메모리를 사용 후 dealloc하는 습관을 가져야 한다.
-----------------------------------------------------------------------------------------------------------------------------

*/